# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['save_images', 'get_mapping', 'bson_to_jpeg']

# Cell
import pandas as pd
from fastcore.all import *
import io
import bson
from PIL import Image
from multiprocessing import Pool

# Cell
def save_images(product, save_dir):
    """Saves product's images to disk."""
    for i, img in enumerate(product["imgs"]):
        save_path = save_dir/f"{product['_id']}_{i}.jpg"
        if save_path.exists(): continue
        picture = Image.open(io.BytesIO(img["picture"]))
        picture.save(save_path)

# Cell
def get_mapping(product): return product["_id"], product["category_id"]

# Cell
@call_parse
def bson_to_jpeg(
    path: Param("Path to BSON", Path),
):
    """Coverts BSON to JPGs and saves product id to category mapping as CSV."""
    path = Path(path)
    save_dir = path.parent/"images"
    save_dir.mkdir(exist_ok=True)
    csv_save_path = path.parent/f"{path.stem}.csv"
    is_test = path.stem == "test"
    print(f"Converting {path} to JPGs in {save_dir}. Mapping saved in {csv_save_path}.")


    print("Starting call to save images.")
    with Pool() as pool:
        with path.open("rb") as file:
            for _ in pool.imap(partial(save_images, save_dir=save_dir), bson.decode_file_iter(file), chunksize=10000):
                pass
    print("Finished saving images.")

    df = None
    if not is_test:
        # Only have category_id's for train data
        print("Starting call to gather mapping.")
        mappings = []
        with Pool() as pool:
            with path.open("rb") as file:
                for mapping in pool.imap(get_mapping, bson.decode_file_iter(file), chunksize=10000):
                    mappings.append(mapping)
        print("Finished gathering mapping.")
        df = pd.DataFrame(mappings, columns=["_id", "category_id"])
        df.to_csv(csv_save_path, index=False)
        print(f"Saved CSV to {csv_save_path}.")
    print("Completed successfully.")
    return df