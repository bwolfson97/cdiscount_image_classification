# AUTOGENERATED! DO NOT EDIT! File to edit: 00_process_bson.ipynb (unless otherwise specified).

__all__ = ['save_images', 'get_mapping', 'bson_to_jpeg']

# Cell
import pandas as pd
from fastcore.all import *
import io
import bson
from PIL import Image
from multiprocessing import Pool
from typing import List

# Cell
def save_images(product, save_dir):
    """Saves product's images to disk."""
    for i, img in enumerate(product["imgs"]):
        save_path = save_dir/f"{product['_id']}_{i}.jpg"
        if save_path.exists(): continue
        with Image.open(io.BytesIO(img["picture"])) as picture:
            picture.save(save_path)

# Cell
def get_mapping(product, columns: List[str]): return [product[col] for col in columns]

# Cell
@call_parse
def bson_to_jpeg(
    path: Param("Path to BSON", Path),
):
    """Coverts BSON to JPGs and saves product id to category mapping as CSV."""
    path = Path(path)
    save_dir = path.parent/"images"
    save_dir.mkdir(exist_ok=True)
    csv_save_path = path.parent/f"{path.stem}.csv"
    is_test = path.stem == "test"
    print(f"Converting {path} to JPGs in {save_dir}. Mapping saved in {csv_save_path}.")

    def parallel_map(func):
        with Pool() as pool:
            with path.open("rb") as file:
                return [res for res in pool.imap(func, bson.decode_file_iter(file), chunksize=10000)]

    print("Starting call to save images.")
    parallel_map(partial(save_images, save_dir=save_dir))
    print("Finished saving images.")

    cols = ["_id"]
    if not is_test: cols.append("category_id")
    print("Starting call to gather mapping.")
    mappings = parallel_map(partial(get_mapping, columns=cols))
    print("Finished gathering mapping.")

    df = pd.DataFrame(mappings, columns=cols)
    df.to_csv(csv_save_path, index=False)
    print(f"Saved CSV to {csv_save_path}.")
    print("Completed successfully.")
    return df