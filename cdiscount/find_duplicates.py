# AUTOGENERATED! DO NOT EDIT! File to edit: 01_find_duplicates.ipynb (unless otherwise specified).

__all__ = ['get_image_path', 'load_img_as_array', 'get_hash', 'MAX_IMAGES_PER_PRODUCT', 'GetProcessRowFunc',
           'process_df']

# Cell
from fastcore.all import *
import pandas as pd
from PIL import Image
from hashlib import md5
from itertools import chain
import numpy as np

# Cell
def get_image_path(data_path, _id, img_num): return data_path/"images"/f"{_id}_{img_num}.jpg"

# Cell
def load_img_as_array(path): return np.array(Image.open(path))

# Cell
def get_hash(array: np.ndarray): return md5(array.tobytes()).hexdigest()

# Cell
MAX_IMAGES_PER_PRODUCT = 4  # each product has up to 4 images

# Cell
def GetProcessRowFunc(data_path: Path, is_test: bool):
    """Get func to process row of train.csv or test_csv."""
    def _inner(*row_values):
        """Processes single row and returns (image hash, image name, _id, category_id, in_test), for each image in product."""
        if is_test: _id, = row_values
        else:       _id,category_id = row_values
        processed_row = []
        for img_num in range(MAX_IMAGES_PER_PRODUCT):
            img_path = get_image_path(data_path, _id, img_num)
            try: _hash = get_hash(load_img_as_array(img_path))
            except FileNotFoundError: break  # Processed all product's images
            processed_row.append((_hash, img_path.name, _id, -1 if is_test else category_id, is_test))
        return processed_row
    return _inner

# Cell
def process_df(data_path: Path, df):
    """Processes a train/test dataframe and returns the intermediate dataframe with hashes."""
    process_row_func = GetProcessRowFunc(data_path, is_test="category_id" not in df)
    processed_products = [process_row_func(*row) for row in zip(*[df[col] for col in df.columns])]
    processed_df = pd.DataFrame(chain.from_iterable(processed_products),
                                columns=["image_hash", "image_name", "_id", "category_id", "in_test"])
    return processed_df
