# AUTOGENERATED! DO NOT EDIT! File to edit: 02_process_duplicates_image_level.ipynb (unless otherwise specified).

__all__ = ['create_vocab', 'convert_category_lists_to_probability_vectors', 'get_test_csvs', 'get_train_csv',
           'get_image_level_csvs']

# Cell
from fastcore.all import *
from .find_duplicates import set_index_and_sort
import numpy as np
import pandas as pd
from PIL import Image

# Cell
def create_vocab(category_names_df):
    categories = L(category_names_df.category_id.unique().tolist())
    categories.sort()
    return categories.val2idx()

# Cell
def _category_list_to_probability_vector_helper(category_list, vocab):
    """Converts list of categories to probability vector."""
    probs = np.zeros(len(vocab))
    for category in category_list:
        probs[vocab[category]] += 1/len(category_list)
    return probs

# Cell
def convert_category_lists_to_probability_vectors(hash2categories: dict, vocab: dict):
    """Converts hash2categories category lists to probability vectors."""
    for hash_, category_list in hash2categories.items():
        hash2categories[hash_] = _category_list_to_probability_vector_helper(category_list, vocab)

# Cell
def get_test_csvs(test_hashes_df, hash2categories: dict):
    """Returns test images mapped to probability vector and test images to predict on."""
    duplicated_imgs_idx = test_hashes_df.index.isin(hash2categories)
    duplicated_test_images_df, unique_test_images_df = test_hashes_df[duplicated_imgs_idx], test_hashes_df[~duplicated_imgs_idx]
    labeled_test = [
        (name, hash2categories[hash_])
        for hash_, name
        in zip(duplicated_test_images_df.index, duplicated_test_images_df.image_name)
    ]
    to_predict = unique_test_images_df.image_name.to_list()
    labeled_test_df = pd.DataFrame(labeled_test, columns=["image_name", "probability"])
    to_predict_df = pd.DataFrame(to_predict, columns=["image_name"])
    return labeled_test_df, to_predict_df

# Cell
def get_train_csv(train_hashes_df, hash2categories: dict):
    """Returns DataFrame of train images not appearing in test."""
    unique_imgs_idx = ~train_hashes_df.index.isin(hash2categories)
    train_unique_df = train_hashes_df[unique_imgs_idx][["image_name", "category_id"]]
    train_unique_df.reset_index(drop=True, inplace=True)
    return train_unique_df

# Cell
@call_parse
def get_image_level_csvs(path: Param("Path to dir containing train_hashes.csv and test_hashes.csv", Path)="."):
    """Process duplicated images for image-level predictions.

    Saves the following CSVs in folder called "image_level_csv":
    - test_labeled.csv:      Test images duplicated in train, mapped to list of labels in train.
    - test_to_predict.csv:   Test images not duplicated in train, to predict on.
    - train_non_duplicated.csv: Train images not duplicated in test, to train on.
    """
    train_hashes_df,test_hashes_df = L("train_hashes.csv", "test_hashes.csv").map(
                                lambda f: pd.read_csv(path/f, index_col=["image_hash", "image_name"]).sort_index())
    test_imgs_in_train_idxs = get_duplicated_image_idxs(test_hashes_df, train_hashes_df)
    train_imgs_in_test_idxs = get_duplicated_image_idxs(train_hashes_df, test_hashes_df)
    assert (set(_get_unique_hashes(test_hashes_df[test_imgs_in_train_idxs])) ==
            set(_get_unique_hashes(train_hashes_df[train_imgs_in_test_idxs])))

    # Create save dir
    save_path = path/"image_level_csvs"
    save_path.mkdir(exist_ok=True)

    print("Creating test_labeled.csv")
    test_labeled_df = get_test_imgs_to_train_categories(test_hashes_df[test_imgs_in_train_idxs], train_hashes_df)
    test_labeled_df.to_csv(save_path/"test_labeled.csv", index=False)
    print("Done")

    print("Creating test_to_predict.csv")
    test_to_predict_df = test_hashes_df.reset_index()[~test_imgs_in_train_idxs]["image_name"]
    test_to_predict_df.to_csv(save_path/"test_to_predict.csv", index=False)
    print("Done")

    # Check that test_labeled and test_to_predict are disjoint on image_name
    assert len(set(test_labeled_df.image_name) & set(test_to_predict_df)) == 0, "Overlap b/t test_labeled and test_to_predict"


    print("Creating train_non_duplicated.csv")
    train_non_duplicated_df = train_hashes_df.reset_index()[~train_imgs_in_test_idxs][["image_name", "category_id"]]
    train_non_duplicated_df.to_csv(save_path/"train_non_duplicated.csv", index=False)
    print("Done")

    print("Script completed.")
    return test_labeled_df, test_to_predict_df, train_non_duplicated_df